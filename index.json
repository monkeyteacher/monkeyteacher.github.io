
[{"content":"","date":"19 February 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"19 February 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"19 February 2025","externalUrl":null,"permalink":"/","section":"小P's Blog","summary":"","title":"小P's Blog","type":"page"},{"content":"","date":"19 February 2025","externalUrl":null,"permalink":"/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%96%A6/","section":"Tags","summary":"","title":"工具推薦","type":"tags"},{"content":"今天來推薦一套線框圖工具 frame0，這套工具其實我去年年底剛出的時後就有注意到了\n那個時候他的官網連 Docs 頁面都還沒做好XD\n我原本是使用 Balsamiq 這套線上線框圖工具，他有免費的 30 試用期，之前有個小小 Bug 是 30 天如果到期可以把帳號砍掉重新註冊，這樣就有新的 30 天可以使用。\n但最近要用的時候發現他改掉了 QQ\n所以才會找到 fram0 這套，會選擇這兩套的原因是因為我個人比較偏好有手繪感的線匡圖。 如果畫面做得太正式或是太完整，可能會讓使用者無法專注討論功能與流程，反而去在意畫面的小細節。\n簡單紹一下 frame0 # frame0 是一個繪製手繪感線框圖的應用程式，對他不是雲端服務是應用程式。\n目前還是免費版，之後不確定會不會收費XD，它支援 macOS, Windows, Liunx 平台。\n線框圖繪製完後可以輸出成 image, PDF, HTML，最近有發現如果內容有中文 PDF 會顯示不出來，但 HTML 是正常的。\n官網：https://frame0.app/ 使用心得 # 目前使用起來蠻順暢的，除了一般線框圖常見的功能，有幾項功能值得提一下：\n提供物件自動 Group 的功能：如果你把Ａ物件放至Ｂ物件裡面，那在移動 B 物件時 A 也會一起移動。我在原本那一款會需要額外 Group 進行綁定，物件才會綁再一起。\ntable 的部分我覺得做得蠻容易操作的。\n但還是有些地方希望官方可以更新一下:\n無法使用 command / ctrl 選擇多個物件，要選多個物件要使用滑鼠匡起來。 PDF 會出不支援中文。 線框圖我覺得是網頁工程師在專案早期確認基本佈局與流程時蠻重要的工具，\n畢竟在與客戶討論時如果沒有一個畫面，客戶很容易想法就發散掉了，\n使用線框圖可以有效的限制使用者的想法，而且討論完後這份檔案也可以作為正式文件。\n尤其需求訪談階段最重要的就是確認雙方腦袋想的東西有沒有一樣，所以線框圖不只是一種文件也是一種有效的溝通工具。\n","date":"19 February 2025","externalUrl":null,"permalink":"/posts/recommended-frame0-wireframe-tool/","section":"Posts","summary":"","title":"線框圖工具推薦 - frame0","type":"posts"},{"content":"","date":"11 February 2025","externalUrl":null,"permalink":"/tags/jmeter/","section":"Tags","summary":"","title":"Jmeter","type":"tags"},{"content":"最近有個系統需要進行壓測，剛好以前有稍微碰過 jmeter，但並沒有寫筆記記錄。\n藉此趁這個機會來複習一下，順便記錄一下使用心得。\n壓測工具有很多比較著名的像是 ApacheBench、JMeter、k6….，\n而當初選擇 Jmeter 主要是因為一張梗圖 XD ，原圖我就不放在這。 有興趣可以去原網址看。\n我這邊附上我自己做的\nJMeter 介紹 # JMeter 與 ApacheBench (AB) 一樣都是 Apache 基金會所維護都開源專案，但與 AB 不同是 AB 只能進行 HTTP 的壓測且只提供 command 的方式，JMeter 支援更多的協定像是基本的 HTTP/S、FTP、JDB，且他還提供 GUI 介面讓用戶可以更直觀的使用。\nJMeter 安裝 # JMeter 的安裝很簡單，他是由 Java 所撰寫且支援多種平台（Windows、Linux、Mac）只要有裝 Java 8+ 就可以執行，安裝方式只要去官網下載他的 Binaries 檔，下載完後直接解壓縮打開即可。\n執行檔位置解壓縮後的 bin 目錄底下。如下圖： 因為我是在 mac 上面操作，所以有遇到被 mac 判定為惡意軟體然後開不起來的狀況。\n記得去系統設定→隱私權及安全性頁面 拉到最下面就可以看到“已阻擋的訊息”，點擊強制開啟就可以執行。\nJMeter 操作說明 # 由於 JMeter 的功能很多，我這邊只介紹我平常在用的，如果你要進行簡單的壓測 API，那看我等等介紹的就夠了，更詳細的可能就要找其他大神XD\n開啟 JMeter # 打開 JMeter 後會看到有一個 Test Plan，Plan 為 JMeter 儲存的基本單位，你可以設定完後把 Plan 存下來，另外一個頁面只能存在一個 Plan，但如果你想要同時操作有多個 Plan 你可以開多個視窗。 如下圖 常用參數介紹\nRun Thread Groups consecutively：一個 Plan 可以存在很多 Thread Group ，這個參數可以用來設定你在執行 Plan時，每個 Thread Groups 是同時進行壓測，還是一個執行完後換下一個。 創建 Thread Group # Thread Group (線程組)：用來定義壓測時的用戶數，啟動時間和循環次數等。\n創建方式如下：\nThread Group 頁面如下： 常用參數說明：\nNumber of Thread (users)：使用者數量。 Ramp-up period (seconds)：啟動所有 Thread （users）所需要的時間。 Loop Count: 每個 Thread 執行的次數，如果勾選 Infinite 則會一直跑。 如果我今天要模擬 100 位用戶同時進入登入我的網站，那我的設定如下：\nNumber of Thread (users)：100 Ramp-up period (seconds)：5\n補充一下，一般的情況下用戶不太可能真的同時進入，而是一個超短時間 因次我沒有設定 1 之類的時間。 Loop Count: 1 加入 HTTP Request # 常見的壓測大多都是壓測 API，因此我們需要設定一個 HTTP 請求，來指定 JMeter 要攻擊的位置。\n創建方式：右鍵點擊 Thread Group → Add → Sampler → Http Request\n畫面如下： 這邊要注意的是如果是 post 要上傳檔案，要點擊 Parameters 最旁邊的 Files Upload，下方畫面就會切過去。\n加入 HTTP Header Manager # 有時候 API 在呼叫時會需要在 Header 設定一些參數，例如 Accept、Authorization 等。\n創建方式：右鍵點擊 Thread Group → Add → Config Element → Http Header Manager\n畫面如下： 加入監聽器 # 最後當然是要來查看我們壓測的結果，以下三個 Listener 為我在測試時常用到的 Listener。\nSummary Report 這個報告主要會提供每個 sampler （取樣）的測試結果。相同的 Label 壓測結果會合併在一起。\n創建方式：右鍵點擊 Thread Group → Add → Listener → Summary Report 畫面如下： 常用參數說明： Label 是對應到 sampler 的 name，也就是在設定 HTTP Request 中的 name。 Samples：這個是請求的數量。 Average：為每個請求的平均回應時間（單位毫秒） Min：為所有請求中最小的回應時間（單位毫秒） Max：為所有請求中最大的回應時間（單位毫秒） Error %：請求錯誤的百分比。 Throughput：每秒處理的請求量。 KB/sec：每秒處理的數據量 （以 KB 為單位）。 View Results Tree 這邊可以查看每個請求的結果、還有回應訊息。如果 api 有錯誤訊息也可以從這邊看。\n創建方式：右鍵點擊 Thread Group → Add → Listener → View Results Tree 畫面如下：\nView Results in Table： 這個是把每個請求的資料表格化，可以看到\n創建方式：右鍵點擊 Thread Group → Add → Listener → View Results in Table 畫面如下：\n以上為我平常使用 Jmeter 的操作說明，其實 Jmeter 的功能非常的多，可以實現很多種壓測狀況。 目前其實沒有玩得很深，日後如果有使用到其他的功能會再慢慢補上。\n","date":"11 February 2025","externalUrl":null,"permalink":"/posts/jmeter-intro/","section":"Posts","summary":"","title":"JMeter 介紹及使用心得－壓測工具筆記","type":"posts"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/gar/","section":"Tags","summary":"","title":"Gar","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/gcp/","section":"Tags","summary":"","title":"Gcp","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/gcr/","section":"Tags","summary":"","title":"Gcr","type":"tags"},{"content":"由於 Google Container Registry 在 2025/03/18 就會停止服務， 因此需要在這之前將 GCR 中的 images 轉移至 GAR (Google Artifact Registry)\nGoogle 有提供可以自動轉移的指令，參考網址：Automatically migrate from Container Registry to Artifact Registry | Artifact Registry documentation | Google Cloud\n轉移指令介紹 # 指令：\ngcloud artifacts docker upgrade migrate \\ --projects=PROJECTS 參數：\n--recent-images=DAYS 只複製 30-180 天內有從 GCR 拉取（pull）的 images --uploaded-version=VERSIONS 複製每個 images 特定數量的上傳版本 這兩個參數無法一起。\n記錄一下本次移轉歷程 # 一開始有使用 Google 提供的檢查 GCR 使用量的指令，來查看目前 GCR 的使用狀況。\n指令如下：\ngcloud container images list-gcr-usage \\ --project=PROJECT 執行結果截圖如下：\nusage：ACTIVE 這代表 us.gcr.io 在過去 30 天內還有在使用 Container Registry\n確認完後就可以執行轉移指令了，指令執行的流程如下：\n一開始會先在 GAR 上建立每個 gcr.io 專案的 repositories，如下圖\n之後會為每一個 repositories 設定 IAM 策略，這邊我們是直接採用 Google 的建議策略 用戶將擁有在 Artifact Registry 上執行所有與 Container Registry 相同操作的權限。 因為有 repositories 所以會執行四次。如下圖\n之後會將 gcr.io 的流量都轉到 GAR。如下圖：\n最後才是將 gcr.io 的所有 images 複製到 GAR 上。\n此專案最後成功移轉 2 個 tags 跟 103 個 manifests，並成功將 *gcr.io 的流量轉移至 GAR。\n另外由於轉移是用複製的方式，所以結束後若測試沒問題記得還要去 gcs 把原本 gcr 上的 image 清一清， 參考網址如下： https://cloud.google.com/artifact-registry/docs/transition/clean-up-images-gcr\n以下為本次轉移遇到的問題 # 執行時遇到找不到指令：\n處理方式是將 gcloud 套件更新至最新。 錯誤截圖如下\n帳號權限不足：\n錯誤代碼會建議需要給予的權限，照做就可以。\n錯誤截圖如下 ","date":"8 February 2025","externalUrl":null,"permalink":"/posts/migrate-gcr-to-gar/","section":"Posts","summary":"","title":"GCR 移轉至 GAR 筆記","type":"posts"},{"content":"","date":"21 January 2025","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":" docker log view # 在 debug 或是開發的時候，常常會需要查看 docker logs\n若是使用 Docker Desktop 可以使用 GUI 來查看 logs\n但如果是在 liunx 的平台上目前都還是使用下指令的方式來查看\n使用指令的方式來查看會遇到一下問題\ncontainer 太多需要一直切來切去。 且在終端機上比較難操作或是查看。 因此來研究一下有哪些好用的 docker log viewer。\n基本 docker logs 介紹 # 先簡單的介紹一下 docker logs 這個指令\n顧名思義 docker logs 就是來查看 docker 中 container 所產生的 log\n詳細說明可以參考官方網站：https://docs.docker.com/reference/cli/docker/container/logs/\n指令說明： # docker logs [OPTIONS] CONTAINER CONTAINER：可以指定容器的 ID 或是容器名稱。 [OPTIONS]：可以調整 log 的顯示方式或是過濾條件。 常用的 OPTIONS： # —follow (-f) 可以實時跟蹤容器的日誌輸出 docker logs -f \u0026lt;container_id_or_name\u0026gt; —tail (-n) 顯示最後 n 行 docker logs —tail 100 \u0026lt;container_id_or_name\u0026gt; —since 顯示字某個時間點後的 log docker logs —since \u0026#34;2025-01-20T00:00:00\u0026#34; \u0026lt;container_id_or_name\u0026gt; 存放位置： # docker log 通常是使用 json 的方式儲存\n/var/lib/docker/containers/\u0026lt;container-id\u0026gt;/\u0026lt;container-id\u0026gt;-json.log 以下介紹的工具皆為開源工具，且皆有提供 docker container 的部署方式。\nPortainer # 官網：https://www.portainer.io/\nGitHub：https://github.com/portainer/portainer\n星星數：31.7k (2024/01/20)\nPortainer 是一個管理 docker 的開源工具。 簡單來說就是一個網頁版的 Docker Desktop，可以管理 Docker 中的 container, images, network, volumes….\n其中 Portainer 有分 Community Edition (CE) 與 Business Edition (BE)，其中的差別可以參考https://www.portainer.io/blog/portainer-community-edition-ce-vs-portainer-business-edition-be-whats-the-difference\n以下討論皆以 Community Edition (CE) 為主\n部署方式 # Portainer 支援 docker container 安裝\n## docker pull sudo docker pull portainer/portainer-ce ## docker run sudo docker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce 第一次登入時會要求設定帳號密碼，畢竟此工具可以操作大部分的 docker 功能，因此需要設定帳號密碼。\nportainer 畫面如下：\nDozzle # 官網：https://dozzle.dev/\nGitHub：https://github.com/amir20/dozzle\n星星數：7.4k (2025/01/20)\n此為專門監控 docker logs 的開源工具， Dozzle 不存儲任何的 log\n就是單純的即時監控 docker container 的 log。\n特點 # 可以使用模糊搜尋，正規表達等方式來查詢 log。 佔用記憶體很小。 支援分割畫面查看多個 logs 即時查看記憶體與 CPU 部署方式 # docker run -d -v /var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle:latest dozzle 畫面如下：\n","date":"21 January 2025","externalUrl":null,"permalink":"/posts/docker-logs-viewer-tool/","section":"Posts","summary":"","title":"Docker Logs Viewer Tool","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]
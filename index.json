
[{"content":"去年在工作上學習到很多技術，但一直沒有好好整理，在朋友的推薦下決定開始寫部落格，記錄一下學習心得。\n說到部落格就會想到 Blogger, Medium, WordPress 等平台， 但身為一個工程師感覺就是要自己架設部落格，只是建置網站的成本很高，伺服器貴貴 QQ\n就找了一下看有甚麼方式可以花少少的錢錢就建置部落格，看了幾款開源的部落格專案後決定使用 Hugo + GitHub Page 來進行建置。\n所以我們的部落格之旅的第一站就是如何用 hugo 建置靜態網站。\n為什麼選擇 Hugo # 在眾多靜態網站生成器中，我選擇 Hugo 的原因如下：\n它是個靜態頁面產生器，目前市面上有許多架設靜態頁面的服務都是免費的，且 SEO 對靜態網站較為友善 Hugo 是用 Golang 撰寫的，剛好符合我的學習規劃 身邊有朋友在使用 Hugo，遇到問題可以互相討論 Hugo 簡介 # Hugo 是一個強大的靜態網站生成器，可以將 Markdown 檔案轉換成純靜態 HTML。 截至 2025/01/21，在 GitHub 上已有 77.4k 星星，並支援 macOS、Linux、Windows 等各大平台。\nHugo 最大的特點就是建置速度快，官方自豪地宣稱：\nThe world\u0026rsquo;s fastest framework for building websites\n安裝 hugo # 由於工作時是使用 mac，所以下面介紹 mac 的安裝方式。\n官方有提供個平台多種安裝方式，可以去官網看看。\n前置 # 理論上如果沒有要自己 build，或是使用 hugo 的模組功能只要下載 git 就好。\nHomebrew # brew install hugo 安裝完後可以使用以下指令查看有無成功。\n## 查看版本 hugo version ## 應該會看到一下回應 hugo v0.140.2+extended+withdeploy darwin/arm64 BuildDate=2024-12-30T15:01:53Z VendorInfo=brew 簡單指令介紹 # 基本上要會用 hugo 只需要記四個指令就可以了。\n## 創建網站 hugo new site [proj_name] ## 建立新文章 hugo new posts/[my-post].md ## 開啟 local 伺服器, -D 顯示草稿 hugo server hugo server -D ## 產生靜態頁面檔案 hugo 簡單目錄介紹 # 這邊簡單介紹一下目錄，建立新專案後目錄如下。\n基本上初學只要先知道幾個目錄就好：\nassets：放置靜態資源的地方 (images, css, js)。 content：放置 md 檔的地方。 themes：放置主題的地方。 hugo.toml：設定檔。 public： 靜態檔產生的目錄，一開始不會有。 開始撰寫部落格 # 知道以上基本知識後就可以來撰寫部落格瞜。\n首先當然是先挑選一個順眼的主題 # 翻了一輪官網的主題後，挑了這個 blowfish 主題，\n在眾多看起來蠻正式的部落格主題中出現一隻河豚，當然選他XD\n建置專案並匯入主題 # # 建置部落格專案 hugo new site new_proj # git 初始化 git init # 把 blowfish 的 Git 專案（子模組）加到你的專案裡 git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish # 刪除原本的設定檔 rm hugo.toml # 把主題的設定目錄複製出來 cp -r themes/blowfish/config/ config/ 接下來就可以來設定基本資訊 # 這邊先貼一下官方的教學。\n修改 config/_default/hugo.toml # theme 原本是註解的，拿掉＃即可 theme = \u0026#34;blowfish\u0026#34; baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;en\u0026#34; 修改 config/_default/languages.en.toml # 填寫 params.author 區塊，記得要把＃拿掉 # image 圖像應放在 assets 中 (預設為河豚) [params.author] name = \u0026#34;小Ｐ\u0026#34; email = \u0026#34;youremail@example.com\u0026#34; image = \u0026#34;img/blowfish_logo.png\u0026#34; imageQuality = 96 headline = \u0026#34;I\u0026#39;m only human\u0026#34; 設定完後就可以先開啟 local 伺服器來看看。\n# hugo local server 預設 port 為 1313 hugo server 撰寫第一篇文章 # 由於靜態檔案都會產生在 public 目錄。\n在新增文章之前可以先新增 .gitignore，將 public 目錄排除。\n#.gitignore /public 新增第一個 md 檔，他會放置在 content 目錄底下。\nhugo new posts/first-post.md 每篇文章最上面都會有 Front matter，而文章內容是寫在下方。\n如下\n+++ date = \u0026#39;2025-02-17T01:59:30+08:00\u0026#39; draft = true title = \u0026#39;First Post\u0026#39; +++ ## 歡迎來到我的 Hugo 網站 這是我的第一篇 Hugo 文章，我正在學習如何使用 Hugo 來建立靜態網站。 Front matter 用來設定文章的 標題、日期、分類、標籤 等資訊。\n開啟伺服器來看看 # 如果文章還是草稿模式 (draft = true) 記得開啟伺服器時要加 -D。\n網址為：http://localhost:1313/posts/first-post\nhugo server -D 其他設定 # 如果有在網站點過一輪會發現我們目前無法從 homepage 找到我們剛剛的文章，因此建議開啟兩個設定。\n開啟 menus # config/_default/menus.en.toml # 打開註解即可 [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 最近文章顯示首頁 # config/_default/params.toml [homepage] showRecent = true cardView = true 設定完後畫面如下:\n看到這個地方就代表我們的靜態網站已經建置完成了！不過這只是開始而已，下一站將介紹如何把網站部署到 GitHub Pages，以及如何設定自己的網域。\n","date":"22 February 2025","externalUrl":null,"permalink":"/posts/hugo-static-site/","section":"Posts","summary":"","title":"Hugo 部落格之旅 - 第一站 : 建置靜態網站","type":"posts"},{"content":"","date":"22 February 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"22 February 2025","externalUrl":null,"permalink":"/","section":"小P's Blog","summary":"","title":"小P's Blog","type":"page"},{"content":"最近有遇到一個需求那就是要將 MySQL 上的資料庫轉移到 MSSQL。\n雖然同樣是 SQL 但兩者指令還是有差，很多用法在 MySQL 上可以用，但在 MSSQL 上卻不行。因此無法直接將 MySQL 資料庫匯出的 sql 檔匯入 MSSQL。\n以前都是匯出 sql 檔後再慢慢修，看哪邊需要調整就修哪邊，後來受到高人指點才知道原來 microsoft 有提供 MySQL 遷移至 MSSQL 的工具。\n官方文件如下：https://learn.microsoft.com/en-us/sql/sql-server/migrate/guides/mysql-to-sql-server?view=sql-server-ver16\n以下記錄我在進行 MySQL 遷移時的過程跟遇到的問題：\n安裝 SSMA for MySQL # SSMA 全名為 SQL Server Migration Assistant for MySQL，顧名思義就是用來協助將 MySQL 資料庫遷移至 MSSQL 的工具。\n下載點：https://www.microsoft.com/en-us/download/details.aspx?id=54257\n安裝完成後畫面截圖如下：\n安裝 MySQL Drive # 由於 SSMA 與 MySQL 進行連線時會需要用到 MySQL connect ODBC Driver\n因此需要安裝 MySQL connect ODBC Driver。\n官方載點：https://dev.mysql.com/downloads/connector/odbc/\n準備開始遷移 # 開啟 SSMA，會看到上方為 MySQL Meta data 視窗，下面則是 SQL Server 視窗。\n在還沒創建 proj 第二排功能鍵是不能按的。 畫面如下：\n1. 要先在 SSMA 創建一個 proj # 點擊左上方 File 中的 New Project 來創建 proj，在創建時要先選擇要 Migrate 的 SQL Server 版本。\n2. 連結 MySQL \u0026amp; MS SQL # 創建完後點擊 上方 Connect to MySQL 與 Connect to SQL Server，即可連接資料庫。 其中在 MySQL 連結視窗中可以看到 Driver 的選項，如果這邊是空的代表你電腦裡沒有 MySQL connect ODBC Driver。\n如果剛裝完還是沒有出現可以重啟電腦看看。\n連線完後會讓你選擇要載入哪個資料庫，這邊可以選擇自己想要匯入的資料庫。\n載入完後在各自的 Meta data 視窗就可以看到資料庫選項。\n如下圖：\n產生簡報 # 在進行遷移之前 SSMA 有提供一個簡報功能，他會幫你製作轉移的分析報告，報告上會顯示哪邊轉移過去後會有問題。\n在 MySQL Metadata 視窗選擇想要遷移的資料庫右鍵點擊 Create Report。 點擊創建報告後，他會產生一個報告網站，截圖如下：\nside bar 點開可以看到每一個 table 的 Schema\n左方為 MySQL Schema 右方則為 MS SQL Schema，如果有出現 warning 與 error 訊息則會出現在 MSSQL 的視窗中。\n可以先調整 MySQL 的 Schema 確認遷移都沒問題後，再進行轉移。\n以下為本次遇到的相關問題： # Foreign keys with different types of columns and referenced columns can not be converted.\n此問題主要的原因是在使用 Laravel 建置主 key 時是使用 UUID，而外 key 是 string (36)\n導致 MySQL 的資料表主 key 會是 char(36)、外 key 是 varchar (36)，在 MySQL 中可以進行關聯，但在 MS SQL 中會發生錯誤。\n解決方式：統一主 key 與外 key 的屬性就好。 ON DELETE CASCADE|SET NULL|SET DEFAULT action was changed to NO ACTION to avoid multiple paths in cascaded foreign keys.\n此問題是因為在某張資料表中同時有多個外 key 同時指向同一個父表， 再進行 ON DELETE 行為時有發生衝突。\n解決方式：把 ON DELETE 行為改為 NO ACTION，也就是不執行任何動作，避免產生衝突。 創建 Schema # 確認完報表沒問題後，就可以來準備建置 schema。\n首先要確認轉移的目標資料庫對不對，點擊要移轉的資料庫右方會出現 Schema Mapping 一般來說 SQL Server 都是對應到 [資料庫].dbo，如下圖：\n確認完對應的資料庫後，即可點擊上方的 Convert Schema ，這時候還不會在 MSSQL 建立資料表與 Schema，而是先產生在 SQL Server Metadata。\n在 SQL Server Metadata 的視窗，對目標資料庫點擊右鍵，會發現 Synchronize with Database 選項。\n點擊 Synchronize with Database 即可開始建立資料表與匯入 Schema，匯入完成後可以進到 SQL Server 進行確認。 轉移資料庫 # 建立完資料表後就可以來進行最後的資料移轉。\n在 MySQL Metadata 的視窗中對要移轉的資料庫右鍵點擊，會看到一個 Migrate Data 的選項。\n點擊 Migrate Data 後會需要再次輸入 MySQL 與 MSSQL 的連線資訊，輸入後就會開始進行移轉。\n以下為轉完後的報告： 如果 Success Rate 都是 100% 那就代表都有成功轉移。\n最後只要去 MSSQL 中確認資料有無都轉移成功即可大功告成。\n參考資料： # https://learn.microsoft.com/zh-tw/sql/ssma/mysql/installing-ssma-for-mysql-client-mysqltosql?view=sql-server-ver16 https://blog.miniasp.com/post/2014/12/24/SQL-Server-Migration-Assistant-for-MySQL-Tips https://ithelp.ithome.com.tw/articles/10322324?sc=rss.iron\n","date":"21 February 2025","externalUrl":null,"permalink":"/posts/mysql-to-mssql-step-by-step/","section":"Posts","summary":"","title":"數據庫遷移：從 MySQL 到 MSSQL 的一步步指引","type":"posts"},{"content":"","date":"19 February 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"19 February 2025","externalUrl":null,"permalink":"/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%96%A6/","section":"Tags","summary":"","title":"工具推薦","type":"tags"},{"content":"今天來推薦一套線框圖工具 frame0，這套工具其實我去年年底剛出的時後就有注意到了\n那個時候他的官網連 Docs 頁面都還沒做好XD\n我原本是使用 Balsamiq 這套線上線框圖工具，他有免費的 30 試用期，之前有個小小 Bug 是 30 天如果到期可以把帳號砍掉重新註冊，這樣就有新的 30 天可以使用。\n但最近要用的時候發現他改掉了 QQ\n所以才會找到 fram0 這套，會選擇這兩套的原因是因為我個人比較偏好有手繪感的線匡圖。 如果畫面做得太正式或是太完整，可能會讓使用者無法專注討論功能與流程，反而去在意畫面的小細節。\n簡單介紹一下 frame0 # frame0 是一個繪製手繪感線框圖的應用程式，對他不是雲端服務是應用程式。\n目前還是免費版，之後不確定會不會收費XD，它支援 macOS, Windows, Liunx 平台。\n線框圖繪製完後可以輸出成 image, PDF, HTML，最近有發現如果內容有中文 PDF 會顯示不出來，但 HTML 是正常的。\n官網：https://frame0.app/ 使用心得 # 目前使用起來蠻順暢的，除了一般線框圖常見的功能，有幾項功能值得提一下：\n提供物件自動 Group 的功能：如果你把Ａ物件放至Ｂ物件裡面，那在移動 B 物件時 A 也會一起移動。我在原本那一款會需要額外 Group 進行綁定，物件才會綁再一起。\ntable 的部分我覺得做得蠻容易操作的。\n但還是有些地方希望官方可以更新一下:\n無法使用 command / ctrl 選擇多個物件，要選多個物件要使用滑鼠匡起來。 PDF 會出不支援中文。 線框圖我覺得是網頁工程師在專案早期確認基本佈局與流程時蠻重要的工具，\n畢竟在與客戶討論時如果沒有一個畫面，客戶很容易想法就發散掉了，\n使用線框圖可以有效的限制使用者的想法，而且討論完後這份檔案也可以作為正式文件。\n尤其需求訪談階段最重要的就是確認雙方腦袋想的東西有沒有一樣，所以線框圖不只是一種文件也是一種有效的溝通工具。\n","date":"19 February 2025","externalUrl":null,"permalink":"/posts/recommended-frame0-wireframe-tool/","section":"Posts","summary":"","title":"線框圖工具推薦 - frame0","type":"posts"},{"content":"","date":"11 February 2025","externalUrl":null,"permalink":"/tags/jmeter/","section":"Tags","summary":"","title":"Jmeter","type":"tags"},{"content":"最近有個系統需要進行壓測，剛好以前有稍微碰過 jmeter，但並沒有寫筆記記錄。\n藉此趁這個機會來複習一下，順便記錄一下使用心得。\n壓測工具有很多比較著名的像是 ApacheBench、JMeter、k6….，\n而當初選擇 Jmeter 主要是因為一張梗圖 XD ，原圖我就不放在這。 有興趣可以去原網址看。\n我這邊附上我自己做的\nJMeter 介紹 # JMeter 與 ApacheBench (AB) 一樣都是 Apache 基金會所維護都開源專案，但與 AB 不同是 AB 只能進行 HTTP 的壓測且只提供 command 的方式，JMeter 支援更多的協定像是基本的 HTTP/S、FTP、JDB，且他還提供 GUI 介面讓用戶可以更直觀的使用。\nJMeter 安裝 # JMeter 的安裝很簡單，他是由 Java 所撰寫且支援多種平台（Windows、Linux、Mac）只要有裝 Java 8+ 就可以執行，安裝方式只要去官網下載他的 Binaries 檔，下載完後直接解壓縮打開即可。\n執行檔位置解壓縮後的 bin 目錄底下。如下圖： 因為我是在 mac 上面操作，所以有遇到被 mac 判定為惡意軟體然後開不起來的狀況。\n記得去系統設定→隱私權及安全性頁面 拉到最下面就可以看到“已阻擋的訊息”，點擊強制開啟就可以執行。\nJMeter 操作說明 # 由於 JMeter 的功能很多，我這邊只介紹我平常在用的，如果你要進行簡單的壓測 API，那看我等等介紹的就夠了，更詳細的可能就要找其他大神XD\n開啟 JMeter # 打開 JMeter 後會看到有一個 Test Plan，Plan 為 JMeter 儲存的基本單位，你可以設定完後把 Plan 存下來，另外一個頁面只能存在一個 Plan，但如果你想要同時操作有多個 Plan 你可以開多個視窗。 如下圖 常用參數介紹\nRun Thread Groups consecutively：一個 Plan 可以存在很多 Thread Group ，這個參數可以用來設定你在執行 Plan時，每個 Thread Groups 是同時進行壓測，還是一個執行完後換下一個。 創建 Thread Group # Thread Group (線程組)：用來定義壓測時的用戶數，啟動時間和循環次數等。\n創建方式如下：\nThread Group 頁面如下： 常用參數說明：\nNumber of Thread (users)：使用者數量。 Ramp-up period (seconds)：啟動所有 Thread （users）所需要的時間。 Loop Count: 每個 Thread 執行的次數，如果勾選 Infinite 則會一直跑。 如果我今天要模擬 100 位用戶同時進入登入我的網站，那我的設定如下：\nNumber of Thread (users)：100 Ramp-up period (seconds)：5\n補充一下，一般的情況下用戶不太可能真的同時進入，而是一個超短時間 因次我沒有設定 1 之類的時間。 Loop Count: 1 加入 HTTP Request # 常見的壓測大多都是壓測 API，因此我們需要設定一個 HTTP 請求，來指定 JMeter 要攻擊的位置。\n創建方式：右鍵點擊 Thread Group → Add → Sampler → Http Request\n畫面如下： 這邊要注意的是如果是 post 要上傳檔案，要點擊 Parameters 最旁邊的 Files Upload，下方畫面就會切過去。\n加入 HTTP Header Manager # 有時候 API 在呼叫時會需要在 Header 設定一些參數，例如 Accept、Authorization 等。\n創建方式：右鍵點擊 Thread Group → Add → Config Element → Http Header Manager\n畫面如下： 加入監聽器 # 最後當然是要來查看我們壓測的結果，以下三個 Listener 為我在測試時常用到的 Listener。\nSummary Report 這個報告主要會提供每個 sampler （取樣）的測試結果。相同的 Label 壓測結果會合併在一起。\n創建方式：右鍵點擊 Thread Group → Add → Listener → Summary Report 畫面如下： 常用參數說明： Label 是對應到 sampler 的 name，也就是在設定 HTTP Request 中的 name。 Samples：這個是請求的數量。 Average：為每個請求的平均回應時間（單位毫秒） Min：為所有請求中最小的回應時間（單位毫秒） Max：為所有請求中最大的回應時間（單位毫秒） Error %：請求錯誤的百分比。 Throughput：每秒處理的請求量。 KB/sec：每秒處理的數據量 （以 KB 為單位）。 View Results Tree 這邊可以查看每個請求的結果、還有回應訊息。如果 api 有錯誤訊息也可以從這邊看。\n創建方式：右鍵點擊 Thread Group → Add → Listener → View Results Tree 畫面如下：\nView Results in Table： 這個是把每個請求的資料表格化，可以看到\n創建方式：右鍵點擊 Thread Group → Add → Listener → View Results in Table 畫面如下：\n以上為我平常使用 Jmeter 的操作說明，其實 Jmeter 的功能非常的多，可以實現很多種壓測狀況。 目前其實沒有玩得很深，日後如果有使用到其他的功能會再慢慢補上。\n應該大家都知道梗圖是出自葬送的芙莉蓮這部動畫，如果不知道的趕快去看一下XD\n另外就順便推薦一下芙莉蓮第二季的 OP !!!\n以下 YT 影片畫面會有劇透，還沒看過的先去看完後再回來XD ","date":"11 February 2025","externalUrl":null,"permalink":"/posts/jmeter-intro/","section":"Posts","summary":"","title":"JMeter 介紹及使用心得－壓測工具筆記","type":"posts"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/gar/","section":"Tags","summary":"","title":"Gar","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/gcp/","section":"Tags","summary":"","title":"Gcp","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/gcr/","section":"Tags","summary":"","title":"Gcr","type":"tags"},{"content":"由於 Google Container Registry 在 2025/03/18 就會停止服務， 因此需要在這之前將 GCR 中的 images 轉移至 GAR (Google Artifact Registry)\nGoogle 有提供可以自動轉移的指令，參考網址：Automatically migrate from Container Registry to Artifact Registry | Artifact Registry documentation | Google Cloud\n轉移指令介紹 # 指令：\ngcloud artifacts docker upgrade migrate \\ --projects=PROJECTS 參數：\n--recent-images=DAYS 只複製 30-180 天內有從 GCR 拉取（pull）的 images --uploaded-version=VERSIONS 複製每個 images 特定數量的上傳版本 這兩個參數無法一起。\n記錄一下本次移轉歷程 # 一開始有使用 Google 提供的檢查 GCR 使用量的指令，來查看目前 GCR 的使用狀況。\n指令如下：\ngcloud container images list-gcr-usage \\ --project=PROJECT 執行結果截圖如下：\nusage：ACTIVE 這代表 us.gcr.io 在過去 30 天內還有在使用 Container Registry\n確認完後就可以執行轉移指令了，指令執行的流程如下：\n一開始會先在 GAR 上建立每個 gcr.io 專案的 repositories，如下圖\n之後會為每一個 repositories 設定 IAM 策略，這邊我們是直接採用 Google 的建議策略 用戶將擁有在 Artifact Registry 上執行所有與 Container Registry 相同操作的權限。 因為有 repositories 所以會執行四次。如下圖\n之後會將 gcr.io 的流量都轉到 GAR。如下圖：\n最後才是將 gcr.io 的所有 images 複製到 GAR 上。\n此專案最後成功移轉 2 個 tags 跟 103 個 manifests，並成功將 *gcr.io 的流量轉移至 GAR。\n另外由於轉移是用複製的方式，所以結束後若測試沒問題記得還要去 gcs 把原本 gcr 上的 image 清一清， 參考網址如下： https://cloud.google.com/artifact-registry/docs/transition/clean-up-images-gcr\n以下為本次轉移遇到的問題 # 執行時遇到找不到指令：\n處理方式是將 gcloud 套件更新至最新。 錯誤截圖如下\n帳號權限不足：\n錯誤代碼會建議需要給予的權限，照做就可以。\n錯誤截圖如下 ","date":"8 February 2025","externalUrl":null,"permalink":"/posts/migrate-gcr-to-gar/","section":"Posts","summary":"","title":"GCR 移轉至 GAR 筆記","type":"posts"},{"content":"","date":"21 January 2025","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":" docker log view # 在 debug 或是開發的時候，常常會需要查看 docker logs\n若是使用 Docker Desktop 可以使用 GUI 來查看 logs\n但如果是在 liunx 的平台上目前都還是使用下指令的方式來查看\n使用指令的方式來查看會遇到一下問題\ncontainer 太多需要一直切來切去。 且在終端機上比較難操作或是查看。 因此來研究一下有哪些好用的 docker log viewer。\n基本 docker logs 介紹 # 先簡單的介紹一下 docker logs 這個指令\n顧名思義 docker logs 就是來查看 docker 中 container 所產生的 log\n詳細說明可以參考官方網站：https://docs.docker.com/reference/cli/docker/container/logs/\n指令說明： # docker logs [OPTIONS] CONTAINER CONTAINER：可以指定容器的 ID 或是容器名稱。 [OPTIONS]：可以調整 log 的顯示方式或是過濾條件。 常用的 OPTIONS： # —follow (-f) 可以實時跟蹤容器的日誌輸出 docker logs -f \u0026lt;container_id_or_name\u0026gt; —tail (-n) 顯示最後 n 行 docker logs —tail 100 \u0026lt;container_id_or_name\u0026gt; —since 顯示字某個時間點後的 log docker logs —since \u0026#34;2025-01-20T00:00:00\u0026#34; \u0026lt;container_id_or_name\u0026gt; 存放位置： # docker log 通常是使用 json 的方式儲存\n/var/lib/docker/containers/\u0026lt;container-id\u0026gt;/\u0026lt;container-id\u0026gt;-json.log 以下介紹的工具皆為開源工具，且皆有提供 docker container 的部署方式。\nPortainer # 官網：https://www.portainer.io/\nGitHub：https://github.com/portainer/portainer\n星星數：31.7k (2024/01/20)\nPortainer 是一個管理 docker 的開源工具。 簡單來說就是一個網頁版的 Docker Desktop，可以管理 Docker 中的 container, images, network, volumes….\n其中 Portainer 有分 Community Edition (CE) 與 Business Edition (BE)，其中的差別可以參考https://www.portainer.io/blog/portainer-community-edition-ce-vs-portainer-business-edition-be-whats-the-difference\n以下討論皆以 Community Edition (CE) 為主\n部署方式 # Portainer 支援 docker container 安裝\n## docker pull sudo docker pull portainer/portainer-ce ## docker run sudo docker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce 第一次登入時會要求設定帳號密碼，畢竟此工具可以操作大部分的 docker 功能，因此需要設定帳號密碼。\nportainer 畫面如下：\nDozzle # 官網：https://dozzle.dev/\nGitHub：https://github.com/amir20/dozzle\n星星數：7.4k (2025/01/20)\n此為專門監控 docker logs 的開源工具， Dozzle 不存儲任何的 log\n就是單純的即時監控 docker container 的 log。\n特點 # 可以使用模糊搜尋，正規表達等方式來查詢 log。 佔用記憶體很小。 支援分割畫面查看多個 logs 即時查看記憶體與 CPU 部署方式 # docker run -d -v /var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle:latest dozzle 畫面如下：\n","date":"21 January 2025","externalUrl":null,"permalink":"/posts/docker-logs-viewer-tool/","section":"Posts","summary":"","title":"Docker Logs Viewer Tool","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]